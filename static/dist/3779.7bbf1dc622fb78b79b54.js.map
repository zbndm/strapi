{"version":3,"file":"3779.7bbf1dc622fb78b79b54.js","mappings":"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a1wF,EAAO00B,QACpB68D,WAAY,IACP98D,EAAM88D,WACTb,iBAAap9G,IAGnB,IAAK,iBACH,MAAO,IACFmhD,EACHk8D,YAAa3wF,EAAO00B,QACpB68D,WAAY,IACP98D,EAAM88D,WACTZ,iBAAar9G,IAGnB,IAAK,aACH,MAAO,IACFmhD,EACHm8D,KAAM5wF,EAAO00B,QACb68D,WAAY,IACP98D,EAAM88D,WACTX,UAAMt9G,IAGZ,IAAK,cACH,MAAO,IACFmhD,EACHA,MAAOz0B,EAAO00B,QACd68D,WAAY,IACP98D,EAAM88D,WACT98D,WAAOnhD,IAGb,IAAK,gBACH,MAAO,IACFmhD,EACHo8D,YAAa7wF,EAAO00B,QAAQ+8D,KAC5BN,eAAgBnxF,EAAO00B,QAAQg9D,YAC/BH,WAAY,IACP98D,EAAM88D,WACTV,iBAAav9G,IAGnB,IAAK,iBACH,MAAO,IACFmhD,EACHq8D,SAAU9wF,EAAO00B,QACjB68D,WAAY,IACP98D,EAAM88D,WACTT,cAAUx9G,IAGhB,IAAK,iBACH,MAAO,IACFmhD,EACHzL,SAAUhpB,EAAO00B,QACjB68D,WAAY,IACP98D,EAAM88D,WACTvoE,cAAU11C,IAGhB,IAAK,cACH,MAAO,IACFmhD,EACHF,MAAOv0B,EAAO00B,QACd68D,WAAY,IACP98D,EAAM88D,WACTh9D,WAAOjhD,IAGb,IAAK,cACH,MAAO,IACFmhD,EACHxrB,MAAOjJ,EAAO00B,QACd68D,WAAY,IACP98D,EAAM88D,WACTtoF,WAAO31B,IAGb,IAAK,iBACH,MAAO,IAAKmhD,EAAOs8D,SAAU/wF,EAAO00B,SACtC,IAAK,mBACH,MAAO,IACFD,EACHg8D,WAAYzwF,EAAO00B,QACnB68D,WAAY,IACP98D,EAAM88D,WACTd,gBAAYn9G,IAGlB,IAAK,mBACH,MAAO,IACFmhD,EACHu8D,WAAYhxF,EAAO00B,QACnB68D,WAAY,IACP98D,EAAM88D,WACTP,gBAAY19G,IAGlB,IAAK,mBACH,MAAO,IACFmhD,EACHw8D,OAAQjxF,EAAO00B,QACf68D,WAAY,IACP98D,EAA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","sources":["webpack://o9/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://o9/./src/hooks/useBlur.ts","webpack://o9/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://o9/./src/hooks/useBlurSync.ts","webpack://o9/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://o9/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://o9/./src/hooks/useFullscreen.ts","webpack://o9/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://o9/./src/components/mediaViewer/VideoPlayer.tsx","webpack://o9/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://o9/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://o9/./src/components/mediaViewer/SenderInfo.tsx","webpack://o9/./src/components/mediaViewer/MediaViewer.tsx","webpack://o9/./src/components/common/ChatOrUserPicker.tsx","webpack://o9/./src/components/common/RecipientPicker.tsx","webpack://o9/./src/components/main/ForwardRecipientPicker.tsx","webpack://o9/./src/components/main/DraftRecipientPicker.tsx","webpack://o9/./src/components/main/AttachBotRecipientPicker.tsx","webpack://o9/./src/components/main/Dialogs.tsx","webpack://o9/./src/components/main/Notifications.tsx","webpack://o9/./src/components/main/SafeLinkModal.tsx","webpack://o9/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://o9/./src/components/main/UrlAuthModal.tsx","webpack://o9/./src/components/common/CalendarModal.tsx","webpack://o9/./src/components/main/HistoryCalendar.tsx","webpack://o9/./src/components/main/NewContactModal.tsx","webpack://o9/./src/components/main/hooks/useWebAppFrame.ts","webpack://o9/./src/components/main/WebAppModal.tsx","webpack://o9/./src/components/main/BotTrustModal.tsx","webpack://o9/./src/components/main/AttachBotInstallModal.tsx","webpack://o9/./src/components/main/DeleteFolderDialog.tsx","webpack://o9/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://o9/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://o9/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://o9/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://o9/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://o9/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://o9/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://o9/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://o9/./src/components/common/SliderDots.module.scss?afdd","webpack://o9/./src/components/common/SliderDots.tsx","webpack://o9/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://o9/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://o9/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://o9/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://o9/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://o9/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://o9/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://o9/./src/components/main/premium/PremiumMainModal.tsx","webpack://o9/./src/components/main/premium/GiftOption.module.scss?a171","webpack://o9/./src/components/main/premium/GiftOption.tsx","webpack://o9/./src/components/main/premium/GiftPremiumModal.tsx","webpack://o9/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://o9/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://o9/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://o9/./src/components/common/AboutAdsModal.tsx","webpack://o9/./src/components/common/DeleteMessageModal.tsx","webpack://o9/./src/components/common/PinMessageModal.tsx","webpack://o9/./src/components/common/UnpinAllMessagesModal.tsx","webpack://o9/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://o9/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://o9/./src/components/middle/MessageSelectToolbar.tsx","webpack://o9/./src/components/common/SeenByModal.tsx","webpack://o9/./src/components/middle/ReactorListModal.tsx","webpack://o9/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://o9/./src/hooks/useSelectWithEnter.ts","webpack://o9/./src/components/left/search/LeftSearchResultChat.tsx","webpack://o9/./src/components/left/search/RecentContacts.tsx","webpack://o9/./src/components/left/search/ChatMessage.tsx","webpack://o9/./src/components/left/search/DateSuggest.tsx","webpack://o9/./src/components/left/search/ChatResults.tsx","webpack://o9/./src/components/left/search/ChatMessageResults.tsx","webpack://o9/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://o9/./src/components/left/search/MediaResults.tsx","webpack://o9/./src/components/left/search/LinkResults.tsx","webpack://o9/./src/components/left/search/FileResults.tsx","webpack://o9/./src/components/left/search/AudioResults.tsx","webpack://o9/./src/components/left/search/LeftSearch.tsx","webpack://o9/./src/hooks/reducers/useTwoFaReducer.ts","webpack://o9/./src/components/left/settings/SettingsHeader.tsx","webpack://o9/./src/hooks/useMultiClick.ts","webpack://o9/./src/components/left/settings/SettingsMain.tsx","webpack://o9/./src/components/common/UsernameInput.tsx","webpack://o9/./src/components/ui/TextArea.tsx","webpack://o9/./src/components/left/settings/SettingsEditProfile.tsx","webpack://o9/./src/components/left/settings/SettingsDataStorage.tsx","webpack://o9/./src/components/ui/Draggable.tsx","webpack://o9/./src/components/ui/Draggable.module.scss?804f","webpack://o9/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://o9/./src/components/ui/ShowMoreButton.tsx","webpack://o9/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://o9/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://o9/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://o9/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://o9/./src/components/left/settings/SettingsGeneral.tsx","webpack://o9/./src/components/left/settings/WallpaperTile.tsx","webpack://o9/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://o9/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://o9/./src/components/left/settings/SettingsNotifications.tsx","webpack://o9/./src/components/left/settings/SettingsPrivacy.tsx","webpack://o9/./src/components/left/settings/SettingsLanguage.tsx","webpack://o9/./src/components/left/settings/helpers/privacy.ts","webpack://o9/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://o9/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://o9/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://o9/./src/components/left/settings/SettingsActiveSession.tsx","webpack://o9/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://o9/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://o9/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://o9/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://o9/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://o9/./src/components/left/settings/BlockUserModal.tsx","webpack://o9/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://o9/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://o9/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://o9/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://o9/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://o9/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://o9/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://o9/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://o9/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://o9/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://o9/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://o9/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://o9/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://o9/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://o9/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://o9/./src/components/middle/composer/StickerSetCover.tsx","webpack://o9/./src/components/common/StickerSetCard.tsx","webpack://o9/./src/components/left/settings/SettingsStickers.tsx","webpack://o9/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://o9/./src/components/left/settings/SettingsExperimental.tsx","webpack://o9/./src/components/left/settings/Settings.tsx","webpack://o9/./src/components/left/main/ContactList.tsx","webpack://o9/./src/components/left/newChat/NewChatStep1.tsx","webpack://o9/./src/components/left/newChat/NewChatStep2.tsx","webpack://o9/./src/components/left/newChat/NewChat.tsx","webpack://o9/./src/components/left/ArchivedChats.tsx","webpack://o9/./src/components/left/ChatFolderModal.tsx","webpack://o9/./src/components/middle/message/helpers/copyOptions.ts","webpack://o9/./src/util/scrollLock.ts","webpack://o9/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://o9/./src/components/middle/message/ReactionSelector.tsx","webpack://o9/./src/components/middle/message/MessageContextMenu.tsx","webpack://o9/./src/components/middle/message/ContextMenuContainer.tsx","webpack://o9/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://o9/./src/components/common/StickerSetModal.tsx","webpack://o9/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://o9/./src/components/common/CustomEmojiSetsModal.tsx","webpack://o9/./src/components/middle/HeaderMenuContainer.tsx","webpack://o9/./src/components/middle/MobileSearch.tsx","webpack://o9/./src/util/findInViewport.ts","webpack://o9/./src/util/isFullyVisible.ts","webpack://o9/./src/util/setTooltipItemVisible.ts","webpack://o9/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://o9/./src/components/middle/composer/MentionTooltip.tsx","webpack://o9/./src/components/middle/composer/AttachmentModal.tsx","webpack://o9/./src/components/middle/composer/PollModal.tsx","webpack://o9/./src/components/middle/composer/EmojiButton.tsx","webpack://o9/./src/components/middle/composer/EmojiCategory.tsx","webpack://o9/./src/components/middle/composer/EmojiPicker.tsx","webpack://o9/./src/components/middle/composer/StickerSet.tsx","webpack://o9/./src/components/middle/composer/StickerPicker.tsx","webpack://o9/./src/components/common/GifButton.tsx","webpack://o9/./src/components/middle/composer/GifPicker.tsx","webpack://o9/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://o9/./src/components/middle/composer/SymbolMenu.tsx","webpack://o9/./src/components/middle/composer/BotCommand.tsx","webpack://o9/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://o9/./src/components/middle/composer/BotCommandMenu.tsx","webpack://o9/./src/components/middle/composer/StickerTooltip.tsx","webpack://o9/./src/components/middle/composer/CustomSendMenu.tsx","webpack://o9/./src/components/middle/composer/EmojiTooltip.tsx","webpack://o9/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://o9/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://o9/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://o9/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://o9/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://o9/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://o9/./src/components/middle/composer/SendAsMenu.tsx","webpack://o9/./src/components/right/RightSearch.tsx","webpack://o9/./src/components/right/StickerSetResult.tsx","webpack://o9/./src/components/right/StickerSearch.tsx","webpack://o9/./src/components/right/GifSearch.tsx","webpack://o9/./src/components/right/statistics/StatisticsOverview.tsx","webpack://o9/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://o9/./src/components/right/statistics/Statistics.tsx","webpack://o9/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://o9/./src/components/right/statistics/MessageStatistics.tsx","webpack://o9/./src/components/right/PollAnswerResults.tsx","webpack://o9/./src/components/right/PollResults.tsx","webpack://o9/./src/components/right/management/ManageUser.tsx","webpack://o9/./src/components/right/management/ManageGroup.tsx","webpack://o9/./src/components/right/management/ManageGroupPermissions.tsx","webpack://o9/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://o9/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://o9/./src/components/right/management/ManageChannel.tsx","webpack://o9/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://o9/./src/components/right/management/ManageDiscussion.tsx","webpack://o9/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://o9/./src/components/right/management/ManageChatAdministrators.tsx","webpack://o9/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://o9/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://o9/./src/components/right/management/ManageGroupMembers.tsx","webpack://o9/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://o9/./src/components/right/management/ManageInvites.tsx","webpack://o9/./src/components/right/management/ManageInvite.tsx","webpack://o9/./src/components/right/management/ManageReactions.tsx","webpack://o9/./src/components/right/management/ManageInviteInfo.tsx","webpack://o9/./src/components/right/management/JoinRequest.tsx","webpack://o9/./src/components/right/management/ManageJoinRequests.tsx","webpack://o9/./src/components/right/management/Management.tsx","webpack://o9/./src/components/common/helpers/detectCardType.ts","webpack://o9/./src/hooks/reducers/usePaymentReducer.ts","webpack://o9/./src/hooks/useFocusAfterAnimation.tsx","webpack://o9/./src/components/ui/Select.tsx","webpack://o9/./src/components/payment/ShippingInfo.tsx","webpack://o9/./src/components/payment/Shipping.tsx","webpack://o9/./src/components/payment/Checkout.module.scss?4e47","webpack://o9/./src/components/payment/Checkout.tsx","webpack://o9/./src/components/payment/ExpiryInput.tsx","webpack://o9/./src/components/middle/helpers/inputFormatters.ts","webpack://o9/./src/components/payment/CardInput.tsx","webpack://o9/./src/components/payment/PaymentInfo.tsx","webpack://o9/./src/components/payment/ConfirmPayment.tsx","webpack://o9/./src/components/payment/PaymentModal.tsx","webpack://o9/./src/components/payment/ReceiptModal.tsx","webpack://o9/./src/components/common/PasswordMonkey.tsx","webpack://o9/./src/components/ui/CropModal.tsx","webpack://o9/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  zoomLevelChange,\n  setZoomLevelChange,\n  onForward,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName('playback-rate-menu', !isFullscreenSupported && 'no-fullscreen')}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  isProtected,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            volume={0}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isProtected={isProtected}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current.scale,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMouseDown && scale > 1 && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) return;\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    close();\n  }) : undefined), [close, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: closeMediaViewer,\n  });\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={avatarOwner.id}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition id=\"MediaViewer\" isOpen={isOpen}>\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n          isAvatar={Boolean(avatarOwner)}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={close}\n        selectMedia={selectMedia}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen, resetSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={searchRef}\n        value={search}\n        onChange={handleSearchChange}\n        onKeyDown={handleKeyDown}\n        placeholder={searchPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nconst ForwardRecipientPicker: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    setForwardChatId({ id: recipientId });\n  }, [setForwardChatId]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(ForwardRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: GlobalState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string) => {\n    openChatWithDraft({ chatId: recipientId, text: requestedDraft!.text });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { botId, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ botId: botId!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [botId, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: global.dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { cancelAttachBotInstall, confirmAttachBotInstall } = getActions();\n\n  const lang = useLang();\n\n  const name = bot?.firstName;\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      confirmHandler={confirmAttachBotInstall}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\nimport safePlay from '../../../../util/safePlay';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (isActive) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isActive]);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <video\n          ref={videoRef}\n          className={buildClassName(\n            styles.video,\n            transitionClassNames,\n          )}\n          src={mediaData}\n          autoPlay={isActive}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, isActivated, canPlay,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated && canPlay}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<OwnProps & StateProps> = ({\n  availableReactions, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused || !isActive ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  unique_reactions: 'PremiumPreviewReactions',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  unique_reactions: 'PremiumPreviewReactionsDescription',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'unique_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'unique_reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.unique_reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.unique_reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(promo.monthlyAmount), promo.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  unique_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(promo.monthlyAmount), promo.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {discount && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || global.requestedDraft\n      || global.requestedAttachBotInChat || global.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport PremiumIcon from '../common/PremiumIcon';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                      {user.isPremium && <PremiumIcon />}\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectTgsUrl = useMedia(`sticker${effectAnimationId}`, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FakeIcon from '../../common/FakeIcon';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n            {privateChatUser?.isPremium && <PremiumIcon />}\n            {chat.fakeType && <FakeIcon fakeType={chat.fakeType} />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? TME_LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  maxBioLength,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!state.orderedFolderIds) {\n      return undefined;\n    }\n\n    if (state.orderedFolderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return state.orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [state.orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"web\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n        >\n          {lang('PrivacySettings.WebSessions')}\n          <span className=\"settings-item__current-value\">{webAuthCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      <h3 className={styles.title} dir=\"auto\">{getUserFullName(renderingBot)}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"date\":\"n6IYAeXnJBCHqpqItrnY\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{getUserFullName(bot)}</span>\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          size={size}\n          tgsUrl={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay disablePictureInPicture />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCoverAnimated from '../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  const preview = useMemo(() => {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }, [firstSticker, lang.isRtl, observeIntersection, stickerSet]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {preview}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  onReset,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <div ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'unique_reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !renderingStickerSet?.installedDate && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      renderingStickerSet.installedDate ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {renderingStickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={renderingStickerSet.installedDate ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot, selectIsPremiumPurchaseBlocked,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  captionLimit: number;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  isCurrentUserPremium,\n}) => {\n  const { clearRecentStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isExpanded, expand] = useFlag(!stickerSet.isEmoji);\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isEmoji = stickerSet.isEmoji;\n\n  const handleClearRecent = useCallback(() => {\n    clearRecentStickers();\n    closeConfirmModal();\n  }, [clearRecentStickers, closeConfirmModal]);\n\n  const isLocked = !isSavedMessages && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some((l) => !l.isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const shouldCutSet = isEmoji && !isExpanded && !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const itemsBeforeCutout = shouldCutSet ? stickersPerRow * 3 : Infinity;\n  const height = Math.ceil((\n    !shouldCutSet ? stickerSet.count : Math.min(itemsBeforeCutout, stickerSet.count))\n    / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, !isExpanded ? (itemsBeforeCutout - 1) : stickerSet.stickers.length)\n          .map((sticker) => (\n            <StickerButton\n              key={sticker.id}\n              sticker={sticker}\n              size={itemSize}\n              observeIntersection={observeIntersection}\n              noAnimate={!loadAndPlay}\n              onClick={onStickerSelect}\n              clickArg={sticker}\n              onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n                ? onStickerUnfave : undefined}\n              onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n              onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              isSavedMessages={isSavedMessages}\n              canViewSet\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          ))}\n        {!isExpanded && stickerSet.count > itemsBeforeCutout - 1 && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout + 1}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n  maxPublicLinks,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  currentUserId,\n  canDeleteMembers,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      serverTimeOffset: global.serverTimeOffset,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `${TME_LINK_PREFIX}${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n  serverTimeOffset,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"checkout-info-item\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkoutInfoItem\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkout-info-item-icon\":\"YqZr6__8x50n06_r2wD8\",\"checkoutInfoItemIcon\":\"YqZr6__8x50n06_r2wD8\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiWebDocument } from '../../api/types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photo?: ApiWebDocument;\n    isRecurring?: boolean;\n    recurringTermsUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  onAcceptTos?: (isAccepted: boolean) => void;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  onAcceptTos,\n}) => {\n  const lang = useLang();\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl,\n  } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className={styles.checkoutInfoItem}>\n      <i className={buildClassName(icon, styles.checkoutInfoItemIcon)}> </i>\n      <div className={styles.checkoutInfoItemInfo}>\n        <div className={styles.checkoutInfoItemInfoTitle}>\n          {title}\n        </div>\n        <p className={styles.checkoutInfoItemInfoData}>\n          {data}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            tabIndex={0}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const { closePaymentModal, openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closePaymentModal();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [closePaymentModal, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry } from '../../api/types';\nimport type { ShippingOption, Price } from '../../types';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        validateRequest();\n        break;\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.PaymentInfo);\n        break;\n      case PaymentStep.PaymentInfo:\n        sendCredentials();\n        break;\n      case PaymentStep.Checkout:\n        sendForm();\n        break;\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n  }, [paymentDispatch]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  const isSubmitDisabled = isLoading\n    || Boolean(step === PaymentStep.Checkout && invoiceContent?.isRecurring && !isTosAccepted);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoiceContent?.isRecurring && 'recurring')}\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photo,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","video","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isAvatar","canReport","onReport","onCloseMediaViewer","zoomLevelChange","setZoomLevelChange","onForward","downloadMessageMedia","cancelMessageMediaDownload","getActions","downloadProgress","handleDownloadClick","useCallback","handleZoomOut","handleZoomIn","lang","useLang","MenuButton","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","muted","onPlay","onEnded","onTimeUpdate","join","square","ownProps","chatId","threadId","avatarOwnerId","mediaViewer","selectChatMessage","senderId","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","type","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","settings","byKey","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","chat","renderText","formatMediaDateTime","date","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","close","handleFooterClick","handleForward","fromChatId","messageIds","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","useHistoryBack","onBack","ShowTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","searchRef","resetSearch","useInputFocusOnOpen","handleSearchChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","getCanPostInChat","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","setForwardChatId","exitForwardMode","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","handleClose","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","botId","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","err","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","cancelAttachBotInstall","confirmAttachBotInstall","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","disablePictureInPicture","AnimatedCircleReaction","realIndex","isActivated","canPlay","reaction","maxLength","handleClick","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","double_limits","unique_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","monthlyAmount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","option","fullMonthlyAmount","months","amount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","find","botUrl","handlePremiumClick","getUserFirstOrLastName","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","isForwardModalOpen","forwardMessages","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","ReactionStaticEmoji","fullName","PremiumIcon","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","fakeType","FakeIcon","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","forceShowSelf","ChatExtra","langName","leftElement","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","children","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","options","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","selectedReaction","defaultReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","firstSticker","handleCardClick","preview","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","values","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isEmoji","isButtonLocked","installedDate","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","expand","handleClearRecent","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","shouldCutSet","itemsBeforeCutout","Infinity","favoriteStickerIdsSet","isRecent","noAnimate","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","canViewSet","stickerSetIntersections","favorite","premiumSet","recentStickers","premiumStickers","shouldPlay","loadRecentStickers","addRecentSticker","removeRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","pickTruthy","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","PREMIUM_STICKER_SET_ID","fullSet","CHAT_STICKER_SET_ID","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleAddClick","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","isRecurring","recurringTermsUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","forceAspectRatio","langStringSplit","renderTosLink","endsWith","formatCardExpiry","teactExperimentControlled","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","closePaymentModal","SUPPORTED_PROVIDERS","step","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","general","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","setIsTosAccepted","canRenderFooter","PaymentStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","handleModalClose","isSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}